version: '3.8'

networks:
  apispringnet:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  app:
    build:
      dockerfile: ./Dockerfile
      context: .
    image: apiteste
    container_name: apiteste
    ports:
      - 5001:5001
    networks:
      - apispringnet

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - apispringnet

  grafana:
    container_name: grafana
    image: grafana/grafana-oss
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - apispringnet

  jaeger:
    container_name: jeager
    image: jaegertracing/all-in-one:latest
    ports:
      - '16686:16686'
      - '4318:4318'
    environment:
      - LOG_LEVEL=debug
    depends_on:
      - app
    networks:
      - apispringnet

  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.4.9
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalog
    networks:
      - apispringnet

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka
    ports:
      - '9091:9091'
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - apispringnet

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: 'no'
    ports:
      - '9000:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:19091'
    depends_on:
      - kafka
    networks:
      - apispringnet

  redis:
    container_name: redis
    image: redis/redis-stack:latest
    command: redis-server --requirepass redis
    ports:
      - '6379:6379'
    networks:
      - apispringnet